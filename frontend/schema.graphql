# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

"An object with an ID"
interface Node {
    "The ID of the object."
    id: ID!
}

type AccountStatisticsType {
    activeUsers: Int
    deactivated: Int
    lastXDays: StatisticsType
    neverLogin: Int
    staff: Int
    superuser: Int
    top10Logins: [Top10Logins]
    total: Int
    trendsInPercent: StatisticsTrendsType
    unverified: Int
    verified: Int
}

"""

Create dynamic settings
An organization should have only one stack available to them.
"""
type CreateStackMutation {
    errors: ExpectedErrorType
    stack: StackType
    success: Boolean
}

"Debugging information for the current query."
type DjangoDebug {
    "Executed SQL queries for this API query."
    sql: [DjangoDebugSQL]
}

"Represents a single database query made to a Django managed DB."
type DjangoDebugSQL {
    "The Django database alias (e.g. 'default')."
    alias: String!
    "Duration of this database query in seconds."
    duration: Float!
    "Postgres connection encoding if available."
    encoding: String
    "Whether this database query was a SELECT."
    isSelect: Boolean!
    "Whether this database query took more than 10 seconds."
    isSlow: Boolean!
    "Postgres isolation level if available."
    isoLevel: String
    "JSON encoded database query parameters."
    params: String!
    "The raw SQL of this query, without params."
    rawSql: String!
    "The actual SQL sent to this database."
    sql: String
    "Start time of this database query."
    startTime: Float!
    "Stop time of this database query."
    stopTime: Float!
    "Postgres transaction ID if available."
    transId: String
    "Postgres transaction status if available."
    transStatus: String
    "The type of database being used (e.g. postrgesql, mysql, sqlite)."
    vendor: String!
}

type EmailType {
    awsAccessKeyId: String
    awsSecretAccessKey: String
    awsSesAutoThrottle: Decimal
    awsSesConfig: String
    awsSesFromArn: String
    awsSesRegionEndpoint: String
    awsSesRegionName: String
    awsSesReturnPathArn: String
    awsSesSourceArn: String
    backend: EmailBackend!
    created: DateTime!
    dkimDomain: String
    dkimHeaders: String
    dkimKey: String
    dkimSelector: String
    failSilently: Boolean!
    fromEmail: String
    host: String
    id: ID!
    modified: DateTime!
    password: String
    port: Int
    stack: StackType
    timeout: Int
    useSsl: Boolean!
    useTls: Boolean!
    username: String
}

type GithubAccessToken {
    accessToken: String
}

type LoginStatisticsType implements Node {
    date: DateTime
    django: Int
    facebook: Int
    github: Int
    google: Int
    "The ID of the object."
    id: ID!
    ipAddress: String
    provider: String!
    timestamp: DateTime!
    total: Int
    unique: Int
    user: UserAdminType!
}

type LoginStatisticsTypeConnection {
    "Contains the nodes in this connection."
    edges: [LoginStatisticsTypeEdge]!
    "Pagination data for this connection."
    pageInfo: PageInfo!
}

"A Relay edge containing a `LoginStatisticsType` and its cursor."
type LoginStatisticsTypeEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: LoginStatisticsType
}

type Mutation {
    """

    Create dynamic settings
    An organization should have only one stack available to them.
    """
    createStack(input: CreateStackInput!): CreateStackMutation
    """

    Change account password when user knows the old password.

    A new token and refresh token are sent. User must be verified.
    """
    passwordChange(newPassword1: String!, newPassword2: String!, oldPassword: String!): PasswordChange
    """

    Change user password without old password.

    Receive the token that was sent by email.

    If token and new passwords are valid, update
    user password and in case of using refresh
    tokens, revoke all of them.

    Also, if user has not been verified yet, verify it.
    """
    passwordReset(newPassword1: String!, newPassword2: String!, token: String!): PasswordReset
    """

    Set user password - for passwordless registration

    Receive the token that was sent by email.

    If token and new passwords are valid, set
    user password and in case of using refresh
    tokens, revoke all of them.

    Also, if user has not been verified yet, verify it.
    """
    passwordSet(newPassword1: String!, newPassword2: String!, token: String!): PasswordSet
    passwordSetAdmin(id: ID!, newPassword1: String!, newPassword2: String!): PasswordSetAdmin
    "Patch dynamic settings"
    patchStack(id: ID!, input: PatchStackInput!): PatchStackMutation
    "Same as `grapgql_jwt` implementation, with standard output."
    refreshToken(refreshToken: String): RefreshToken
    """

    Register user with fields defined in the settings.

    If the email field of the user model is part of the
    registration fields (default), check if there is
    no user with that email or as a secondary email.

    If it exists, it does not register the user,
    even if the email field is not defined as unique
    (default of the default django user model).

    When creating the user, it also creates a `UserStatus`
    related to that user, making it possible to track
    if the user is archived, verified and has a secondary
    email.

    Send account verification email.

    If allowed to not verified users login, return token.
    """
    register(email: String!, firstName: String!, lastName: String, middleName: String, mobileNumber: String, password1: String!, password2: String!): Register
    "Create User - Staff only"
    registerAdmin(input: CreateUserInput!): UserRegisterAdmin
    """

    Sends activation email.

    It is called resend because theoretically
    the first activation email was sent when
    the user registered.

    If there is no user with the requested email,
    a successful response is returned.
    """
    resendActivationEmail(email: String!): ResendActivationEmail
    "Same as `grapgql_jwt` implementation, with standard output."
    revokeToken(refreshToken: String): RevokeToken
    """

    Send password reset email.

    For non verified users, send an activation
    email instead.

    Accepts both primary and secondary email.

    If there is no user with the requested email,
    a successful response is returned.
    """
    sendPasswordResetEmail(email: String!): SendPasswordResetEmail
    "Send Test email."
    sendTestEmail: SendTestEmail
    "Send Welcome email."
    sendWelcomeEmail: SendWelcomeEmail
    "Social Auth for JSON Web Token (JWT)"
    socialAuth(accessToken: String!, provider: String!): SocialAuthJWT
    socialAuthGithub(code: String!): GithubAccessToken
    socialAuthTwitter(requestToken: String!, verifier: String!): TwitterAccessToken
    socialAuthTwitterReq: TwitterRequestToken
    """

    Obtain JSON web token for given user.

    Allow to perform login with different fields,
    and secondary email if set. The fields are
    defined on settings.

    Unlike other mutations, if the given credentials are invalid
    or the user does not exist, a top-level GraphQL error will be
    returned to the client instead of an "errors"
    object within the data object.

    Not verified users can login by default. This
    can be changes on settings.

    If user is archived, make it unarchive and
    return `unarchiving=True` on output.
    """
    tokenAuth(email: String, password: String!): ObtainJSONWebToken
    "Patch User data - logged user"
    updateAccount(id: ID!, input: PatchUserInput!): UserPatch
    "Patch User data - Staff only"
    updateAccountAdmin(id: ID!, input: UpdateUserInputStaff!): UserPatchAdmin
    """

    Verify user account.

    Receive the token that was sent by email.
    If the token is valid, make the user verified
    by making the `user.status.verified` field true.
    """
    verifyAccount(token: String!): VerifyAccount
    "Same as `grapgql_jwt` implementation, with standard output."
    verifyToken(token: String): VerifyToken
}

type Nationality {
    label: String
    value: String
}

"""

Obtain JSON web token for given user.

Allow to perform login with different fields,
and secondary email if set. The fields are
defined on settings.

Unlike other mutations, if the given credentials are invalid
or the user does not exist, a top-level GraphQL error will be
returned to the client instead of an "errors"
object within the data object.

Not verified users can login by default. This
can be changes on settings.

If user is archived, make it unarchive and
return `unarchiving=True` on output.
"""
type ObtainJSONWebToken {
    errors: ExpectedErrorType
    payload: GenericScalar!
    refreshExpiresIn: Int!
    refreshToken: String!
    success: Boolean
    token: String!
    unarchiving: Boolean
    user: UserNode
}

"The Relay compliant `PageInfo` type, containing data necessary to paginate this connection."
type PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"""

Change account password when user knows the old password.

A new token and refresh token are sent. User must be verified.
"""
type PasswordChange {
    errors: ExpectedErrorType
    refreshToken: String
    success: Boolean
    token: String
}

"""

Change user password without old password.

Receive the token that was sent by email.

If token and new passwords are valid, update
user password and in case of using refresh
tokens, revoke all of them.

Also, if user has not been verified yet, verify it.
"""
type PasswordReset {
    errors: ExpectedErrorType
    success: Boolean
}

"""

Set user password - for passwordless registration

Receive the token that was sent by email.

If token and new passwords are valid, set
user password and in case of using refresh
tokens, revoke all of them.

Also, if user has not been verified yet, verify it.
"""
type PasswordSet {
    errors: ExpectedErrorType
    success: Boolean
}

type PasswordSetAdmin {
    errors: ExpectedErrorType
    success: Boolean
}

"Patch dynamic settings"
type PatchStackMutation {
    errors: ExpectedErrorType
    stack: StackType
    success: Boolean
}

type ProfileType {
    address: String!
    company: String!
    created: DateTime!
    dateOfBirth: Date
    extraInfo: JSONString!
    gender: String
    id: UUID!
    inviteCode: String!
    legacyId: String!
    modified: DateTime!
    nationality: String!
    picture: String!
    timezone: ProfileTimezone!
    user: UserAdminType!
}

type Query {
    _debug: DjangoDebug
    accountStatistics(dateEnd: Date!, dateStart: Date!): AccountStatisticsType
    allNationalities: [Nationality]
    allTimezones: [TimezoneType]
    loginStatistics(after: String, before: String, dateRange: String, first: Int, last: Int, offset: Int): LoginStatisticsTypeConnection
    me: UserType
    stack(id: ID): StackType
    stacks(after: String, before: String, email_Backend: String, first: Int, last: Int, offset: Int, orderBy: [String], search: String): StackTypeConnection
    user(id: ID): UserType
    userGrowthStatistics(dateEnd: Date!, dateStart: Date!): [UserGrowthStatisticsType]
    users(after: String, before: String, email: String, first: Int, firstName: String, firstName_Istartswith: String, isActive: Boolean, isStaff: Boolean, last: Int, offset: Int, orderBy: [String], search: String, status_Verified: Boolean): UserTypeConnection
}

"Same as `grapgql_jwt` implementation, with standard output."
type RefreshToken {
    errors: ExpectedErrorType
    payload: GenericScalar!
    refreshExpiresIn: Int!
    refreshToken: String!
    success: Boolean
    token: String!
}

"""

Register user with fields defined in the settings.

If the email field of the user model is part of the
registration fields (default), check if there is
no user with that email or as a secondary email.

If it exists, it does not register the user,
even if the email field is not defined as unique
(default of the default django user model).

When creating the user, it also creates a `UserStatus`
related to that user, making it possible to track
if the user is archived, verified and has a secondary
email.

Send account verification email.

If allowed to not verified users login, return token.
"""
type Register {
    errors: ExpectedErrorType
    refreshToken: String
    success: Boolean
    token: String
}

"""

Sends activation email.

It is called resend because theoretically
the first activation email was sent when
the user registered.

If there is no user with the requested email,
a successful response is returned.
"""
type ResendActivationEmail {
    errors: ExpectedErrorType
    success: Boolean
}

"Same as `grapgql_jwt` implementation, with standard output."
type RevokeToken {
    errors: ExpectedErrorType
    revoked: Int!
    success: Boolean
}

"""

Send password reset email.

For non verified users, send an activation
email instead.

Accepts both primary and secondary email.

If there is no user with the requested email,
a successful response is returned.
"""
type SendPasswordResetEmail {
    errors: ExpectedErrorType
    success: Boolean
}

"Send Test email."
type SendTestEmail {
    errors: ExpectedErrorType
    success: Boolean
}

"Send Welcome email."
type SendWelcomeEmail {
    errors: ExpectedErrorType
    success: Boolean
}

"Social Auth for JSON Web Token (JWT)"
type SocialAuthJWT {
    refreshToken: String
    social: SocialType
    token: String
}

type SocialType {
    created: DateTime!
    extraData: SocialCamelJSON
    id: ID!
    modified: DateTime!
    provider: String!
    uid: String!
    user: UserAdminType!
}

type StackType implements Node {
    created: DateTime!
    createdBy: UserAdminType!
    email: EmailType!
    "The ID of the object."
    id: ID!
    modified: DateTime!
    siteTitle: String
}

type StackTypeConnection {
    edgeCount: Int
    "Contains the nodes in this connection."
    edges: [StackTypeEdge]!
    "Pagination data for this connection."
    pageInfo: PageInfo!
    totalCount: Int
}

"A Relay edge containing a `StackType` and its cursor."
type StackTypeEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: StackType
}

type StatisticsTrendsType {
    percentageChangeJoined: Float
    percentageChangeLogins: Float
    percentageChangeVerified: Float
}

type StatisticsType {
    activeUsers: Int
    deactivated: Int
    neverLogin: Int
    staff: Int
    superuser: Int
    total: Int
    unverified: Int
    verified: Int
}

type TimezoneType {
    label: String!
    value: String!
}

type Top10Logins {
    logins: Int
    user: UserType
}

type TwitterAccessToken {
    accessToken: String
    accessTokenSecret: String
}

type TwitterRequestToken {
    authenticateUrl: String
    requestOauthSecret: String
    requestOauthToken: String
}

type UserAdminType implements Node {
    dateJoined: DateTime!
    email: String!
    firstName: String!
    "The ID of the object."
    id: ID!
    "Designates whether this user should be treated as active. Unselect this instead of deleting accounts."
    isActive: Boolean!
    "Designates whether the user can log into this admin site."
    isStaff: Boolean!
    "Designates that this user has all permissions without explicitly assigning them."
    isSuperuser: Boolean!
    lastLogin: DateTime
    lastName: String!
    middleName: String!
    mobileNumber: String!
    modified: DateTime!
    password: String!
    profile: ProfileType
    socialAuth: [SocialType!]!
    stackSet(after: String, before: String, email_Backend: String, first: Int, last: Int, offset: Int): StackTypeConnection!
    userLogins(after: String, before: String, first: Int, last: Int, offset: Int): LoginStatisticsTypeConnection!
}

type UserGrowthStatisticsType {
    date: DateTime
    newUnverifiedUsers: Int
    newUsers: Int
    newVerifiedUsers: Int
    totalUnverifiedUsers: Int
    totalUsers: Int
    totalVerifiedUsers: Int
}

type UserNode implements Node {
    archived: Boolean
    dateJoined: DateTime!
    email: String!
    firstName: String!
    "The ID of the object."
    id: ID!
    "Designates whether this user should be treated as active. Unselect this instead of deleting accounts."
    isActive: Boolean!
    "Designates whether the user can log into this admin site."
    isStaff: Boolean!
    "Designates that this user has all permissions without explicitly assigning them."
    isSuperuser: Boolean!
    lastLogin: DateTime
    lastName: String!
    middleName: String!
    mobileNumber: String!
    modified: DateTime!
    pk: Int
    profile: ProfileType
    secondaryEmail: String
    socialAuth: [SocialType!]!
    stackSet(after: String, before: String, email_Backend: String, first: Int, last: Int, offset: Int): StackTypeConnection!
    userLogins(after: String, before: String, first: Int, last: Int, offset: Int): LoginStatisticsTypeConnection!
    verified: Boolean
}

"Patch User data - logged user"
type UserPatch {
    errors: ExpectedErrorType
    success: Boolean
    user: UserAdminType
}

"Patch User data - Staff only"
type UserPatchAdmin {
    errors: ExpectedErrorType
    success: Boolean
    user: UserAdminType
}

"Create User - Staff only"
type UserRegisterAdmin {
    errors: ExpectedErrorType
    success: Boolean
    user: UserAdminType
}

type UserType implements Node {
    dateJoined: DateTime!
    email: String!
    firstName: String!
    fullName: String
    "The ID of the object."
    id: ID!
    "Designates whether this user should be treated as active. Unselect this instead of deleting accounts."
    isActive: Boolean!
    "Designates whether the user can log into this admin site."
    isStaff: Boolean!
    "Designates that this user has all permissions without explicitly assigning them."
    isSuperuser: Boolean!
    lastLogin: DateTime
    lastName: String!
    middleName: String!
    mobileNumber: String!
    modified: DateTime!
    pk: String
    profile: ProfileType
    socialAuth: [SocialType!]!
    stackSet(after: String, before: String, email_Backend: String, first: Int, last: Int, offset: Int): StackTypeConnection!
    userLogins(after: String, before: String, first: Int, last: Int, offset: Int): LoginStatisticsTypeConnection!
    verified: Boolean
}

type UserTypeConnection {
    edgeCount: Int
    "Contains the nodes in this connection."
    edges: [UserTypeEdge]!
    "Pagination data for this connection."
    pageInfo: PageInfo!
    totalCount: Int
}

"A Relay edge containing a `UserType` and its cursor."
type UserTypeEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: UserType
}

"""

Verify user account.

Receive the token that was sent by email.
If the token is valid, make the user verified
by making the `user.status.verified` field true.
"""
type VerifyAccount {
    errors: ExpectedErrorType
    success: Boolean
}

"Same as `grapgql_jwt` implementation, with standard output."
type VerifyToken {
    errors: ExpectedErrorType
    payload: GenericScalar!
    success: Boolean
}

enum EmailBackend {
    "Console"
    CONSOLE
    "Dummy"
    DUMMY
    "Console"
    IN_MEMORY
    "Amazon SES"
    SES
    "SMTP"
    SMTP
}

enum ProfileGender {
    A_
    "Female"
    F
    "Male"
    M
    "Others"
    O
}

enum ProfileTimezone {
    "Africa/Abidjan"
    AFRICA_ABIDJAN
    "Africa/Accra"
    AFRICA_ACCRA
    "Africa/Addis Ababa"
    AFRICA_ADDIS_ABABA
    "Africa/Algiers"
    AFRICA_ALGIERS
    "Africa/Asmara"
    AFRICA_ASMARA
    "Africa/Bamako"
    AFRICA_BAMAKO
    "Africa/Bangui"
    AFRICA_BANGUI
    "Africa/Banjul"
    AFRICA_BANJUL
    "Africa/Bissau"
    AFRICA_BISSAU
    "Africa/Blantyre"
    AFRICA_BLANTYRE
    "Africa/Brazzaville"
    AFRICA_BRAZZAVILLE
    "Africa/Bujumbura"
    AFRICA_BUJUMBURA
    "Africa/Cairo"
    AFRICA_CAIRO
    "Africa/Casablanca"
    AFRICA_CASABLANCA
    "Africa/Ceuta"
    AFRICA_CEUTA
    "Africa/Conakry"
    AFRICA_CONAKRY
    "Africa/Dakar"
    AFRICA_DAKAR
    "Africa/Dar es Salaam"
    AFRICA_DAR_ES_SALAAM
    "Africa/Djibouti"
    AFRICA_DJIBOUTI
    "Africa/Douala"
    AFRICA_DOUALA
    "Africa/El Aaiun"
    AFRICA_EL_AAIUN
    "Africa/Freetown"
    AFRICA_FREETOWN
    "Africa/Gaborone"
    AFRICA_GABORONE
    "Africa/Harare"
    AFRICA_HARARE
    "Africa/Johannesburg"
    AFRICA_JOHANNESBURG
    "Africa/Juba"
    AFRICA_JUBA
    "Africa/Kampala"
    AFRICA_KAMPALA
    "Africa/Khartoum"
    AFRICA_KHARTOUM
    "Africa/Kigali"
    AFRICA_KIGALI
    "Africa/Kinshasa"
    AFRICA_KINSHASA
    "Africa/Lagos"
    AFRICA_LAGOS
    "Africa/Libreville"
    AFRICA_LIBREVILLE
    "Africa/Lome"
    AFRICA_LOME
    "Africa/Luanda"
    AFRICA_LUANDA
    "Africa/Lubumbashi"
    AFRICA_LUBUMBASHI
    "Africa/Lusaka"
    AFRICA_LUSAKA
    "Africa/Malabo"
    AFRICA_MALABO
    "Africa/Maputo"
    AFRICA_MAPUTO
    "Africa/Maseru"
    AFRICA_MASERU
    "Africa/Mbabane"
    AFRICA_MBABANE
    "Africa/Mogadishu"
    AFRICA_MOGADISHU
    "Africa/Monrovia"
    AFRICA_MONROVIA
    "Africa/Nairobi"
    AFRICA_NAIROBI
    "Africa/Ndjamena"
    AFRICA_NDJAMENA
    "Africa/Niamey"
    AFRICA_NIAMEY
    "Africa/Nouakchott"
    AFRICA_NOUAKCHOTT
    "Africa/Ouagadougou"
    AFRICA_OUAGADOUGOU
    "Africa/Porto-Novo"
    AFRICA_PORTO_NOVO
    "Africa/Sao Tome"
    AFRICA_SAO_TOME
    "Africa/Tripoli"
    AFRICA_TRIPOLI
    "Africa/Tunis"
    AFRICA_TUNIS
    "Africa/Windhoek"
    AFRICA_WINDHOEK
    "America/Adak"
    AMERICA_ADAK
    "America/Anchorage"
    AMERICA_ANCHORAGE
    "America/Anguilla"
    AMERICA_ANGUILLA
    "America/Antigua"
    AMERICA_ANTIGUA
    "America/Araguaina"
    AMERICA_ARAGUAINA
    "America/Argentina/Buenos Aires"
    AMERICA_ARGENTINA_BUENOS_AIRES
    "America/Argentina/Catamarca"
    AMERICA_ARGENTINA_CATAMARCA
    "America/Argentina/Cordoba"
    AMERICA_ARGENTINA_CORDOBA
    "America/Argentina/Jujuy"
    AMERICA_ARGENTINA_JUJUY
    "America/Argentina/La Rioja"
    AMERICA_ARGENTINA_LA_RIOJA
    "America/Argentina/Mendoza"
    AMERICA_ARGENTINA_MENDOZA
    "America/Argentina/Rio Gallegos"
    AMERICA_ARGENTINA_RIO_GALLEGOS
    "America/Argentina/Salta"
    AMERICA_ARGENTINA_SALTA
    "America/Argentina/San Juan"
    AMERICA_ARGENTINA_SAN_JUAN
    "America/Argentina/San Luis"
    AMERICA_ARGENTINA_SAN_LUIS
    "America/Argentina/Tucuman"
    AMERICA_ARGENTINA_TUCUMAN
    "America/Argentina/Ushuaia"
    AMERICA_ARGENTINA_USHUAIA
    "America/Aruba"
    AMERICA_ARUBA
    "America/Asuncion"
    AMERICA_ASUNCION
    "America/Atikokan"
    AMERICA_ATIKOKAN
    "America/Bahia"
    AMERICA_BAHIA
    "America/Bahia Banderas"
    AMERICA_BAHIA_BANDERAS
    "America/Barbados"
    AMERICA_BARBADOS
    "America/Belem"
    AMERICA_BELEM
    "America/Belize"
    AMERICA_BELIZE
    "America/Blanc-Sablon"
    AMERICA_BLANC_SABLON
    "America/Boa Vista"
    AMERICA_BOA_VISTA
    "America/Bogota"
    AMERICA_BOGOTA
    "America/Boise"
    AMERICA_BOISE
    "America/Cambridge Bay"
    AMERICA_CAMBRIDGE_BAY
    "America/Campo Grande"
    AMERICA_CAMPO_GRANDE
    "America/Cancun"
    AMERICA_CANCUN
    "America/Caracas"
    AMERICA_CARACAS
    "America/Cayenne"
    AMERICA_CAYENNE
    "America/Cayman"
    AMERICA_CAYMAN
    "America/Chicago"
    AMERICA_CHICAGO
    "America/Chihuahua"
    AMERICA_CHIHUAHUA
    "America/Ciudad Juarez"
    AMERICA_CIUDAD_JUAREZ
    "America/Costa Rica"
    AMERICA_COSTA_RICA
    "America/Creston"
    AMERICA_CRESTON
    "America/Cuiaba"
    AMERICA_CUIABA
    "America/Curacao"
    AMERICA_CURACAO
    "America/Danmarkshavn"
    AMERICA_DANMARKSHAVN
    "America/Dawson"
    AMERICA_DAWSON
    "America/Dawson Creek"
    AMERICA_DAWSON_CREEK
    "America/Denver"
    AMERICA_DENVER
    "America/Detroit"
    AMERICA_DETROIT
    "America/Dominica"
    AMERICA_DOMINICA
    "America/Edmonton"
    AMERICA_EDMONTON
    "America/Eirunepe"
    AMERICA_EIRUNEPE
    "America/El Salvador"
    AMERICA_EL_SALVADOR
    "America/Fortaleza"
    AMERICA_FORTALEZA
    "America/Fort Nelson"
    AMERICA_FORT_NELSON
    "America/Glace Bay"
    AMERICA_GLACE_BAY
    "America/Goose Bay"
    AMERICA_GOOSE_BAY
    "America/Grand Turk"
    AMERICA_GRAND_TURK
    "America/Grenada"
    AMERICA_GRENADA
    "America/Guadeloupe"
    AMERICA_GUADELOUPE
    "America/Guatemala"
    AMERICA_GUATEMALA
    "America/Guayaquil"
    AMERICA_GUAYAQUIL
    "America/Guyana"
    AMERICA_GUYANA
    "America/Halifax"
    AMERICA_HALIFAX
    "America/Havana"
    AMERICA_HAVANA
    "America/Hermosillo"
    AMERICA_HERMOSILLO
    "America/Indiana/Indianapolis"
    AMERICA_INDIANA_INDIANAPOLIS
    "America/Indiana/Knox"
    AMERICA_INDIANA_KNOX
    "America/Indiana/Marengo"
    AMERICA_INDIANA_MARENGO
    "America/Indiana/Petersburg"
    AMERICA_INDIANA_PETERSBURG
    "America/Indiana/Tell City"
    AMERICA_INDIANA_TELL_CITY
    "America/Indiana/Vevay"
    AMERICA_INDIANA_VEVAY
    "America/Indiana/Vincennes"
    AMERICA_INDIANA_VINCENNES
    "America/Indiana/Winamac"
    AMERICA_INDIANA_WINAMAC
    "America/Inuvik"
    AMERICA_INUVIK
    "America/Iqaluit"
    AMERICA_IQALUIT
    "America/Jamaica"
    AMERICA_JAMAICA
    "America/Juneau"
    AMERICA_JUNEAU
    "America/Kentucky/Louisville"
    AMERICA_KENTUCKY_LOUISVILLE
    "America/Kentucky/Monticello"
    AMERICA_KENTUCKY_MONTICELLO
    "America/Kralendijk"
    AMERICA_KRALENDIJK
    "America/La Paz"
    AMERICA_LA_PAZ
    "America/Lima"
    AMERICA_LIMA
    "America/Los Angeles"
    AMERICA_LOS_ANGELES
    "America/Lower Princes"
    AMERICA_LOWER_PRINCES
    "America/Maceio"
    AMERICA_MACEIO
    "America/Managua"
    AMERICA_MANAGUA
    "America/Manaus"
    AMERICA_MANAUS
    "America/Marigot"
    AMERICA_MARIGOT
    "America/Martinique"
    AMERICA_MARTINIQUE
    "America/Matamoros"
    AMERICA_MATAMOROS
    "America/Mazatlan"
    AMERICA_MAZATLAN
    "America/Menominee"
    AMERICA_MENOMINEE
    "America/Merida"
    AMERICA_MERIDA
    "America/Metlakatla"
    AMERICA_METLAKATLA
    "America/Mexico City"
    AMERICA_MEXICO_CITY
    "America/Miquelon"
    AMERICA_MIQUELON
    "America/Moncton"
    AMERICA_MONCTON
    "America/Monterrey"
    AMERICA_MONTERREY
    "America/Montevideo"
    AMERICA_MONTEVIDEO
    "America/Montserrat"
    AMERICA_MONTSERRAT
    "America/Nassau"
    AMERICA_NASSAU
    "America/New York"
    AMERICA_NEW_YORK
    "America/Nome"
    AMERICA_NOME
    "America/Noronha"
    AMERICA_NORONHA
    "America/North Dakota/Beulah"
    AMERICA_NORTH_DAKOTA_BEULAH
    "America/North Dakota/Center"
    AMERICA_NORTH_DAKOTA_CENTER
    "America/North Dakota/New Salem"
    AMERICA_NORTH_DAKOTA_NEW_SALEM
    "America/Nuuk"
    AMERICA_NUUK
    "America/Ojinaga"
    AMERICA_OJINAGA
    "America/Panama"
    AMERICA_PANAMA
    "America/Paramaribo"
    AMERICA_PARAMARIBO
    "America/Phoenix"
    AMERICA_PHOENIX
    "America/Porto Velho"
    AMERICA_PORTO_VELHO
    "America/Port-au-Prince"
    AMERICA_PORT_AU_PRINCE
    "America/Port of Spain"
    AMERICA_PORT_OF_SPAIN
    "America/Puerto Rico"
    AMERICA_PUERTO_RICO
    "America/Punta Arenas"
    AMERICA_PUNTA_ARENAS
    "America/Rankin Inlet"
    AMERICA_RANKIN_INLET
    "America/Recife"
    AMERICA_RECIFE
    "America/Regina"
    AMERICA_REGINA
    "America/Resolute"
    AMERICA_RESOLUTE
    "America/Rio Branco"
    AMERICA_RIO_BRANCO
    "America/Santarem"
    AMERICA_SANTAREM
    "America/Santiago"
    AMERICA_SANTIAGO
    "America/Santo Domingo"
    AMERICA_SANTO_DOMINGO
    "America/Sao Paulo"
    AMERICA_SAO_PAULO
    "America/Scoresbysund"
    AMERICA_SCORESBYSUND
    "America/Sitka"
    AMERICA_SITKA
    "America/St Barthelemy"
    AMERICA_ST_BARTHELEMY
    "America/St Johns"
    AMERICA_ST_JOHNS
    "America/St Kitts"
    AMERICA_ST_KITTS
    "America/St Lucia"
    AMERICA_ST_LUCIA
    "America/St Thomas"
    AMERICA_ST_THOMAS
    "America/St Vincent"
    AMERICA_ST_VINCENT
    "America/Swift Current"
    AMERICA_SWIFT_CURRENT
    "America/Tegucigalpa"
    AMERICA_TEGUCIGALPA
    "America/Thule"
    AMERICA_THULE
    "America/Tijuana"
    AMERICA_TIJUANA
    "America/Toronto"
    AMERICA_TORONTO
    "America/Tortola"
    AMERICA_TORTOLA
    "America/Vancouver"
    AMERICA_VANCOUVER
    "America/Whitehorse"
    AMERICA_WHITEHORSE
    "America/Winnipeg"
    AMERICA_WINNIPEG
    "America/Yakutat"
    AMERICA_YAKUTAT
    "America/Yellowknife"
    AMERICA_YELLOWKNIFE
    "Antarctica/Casey"
    ANTARCTICA_CASEY
    "Antarctica/Davis"
    ANTARCTICA_DAVIS
    "Antarctica/DumontDUrville"
    ANTARCTICA_DUMONTDURVILLE
    "Antarctica/Macquarie"
    ANTARCTICA_MACQUARIE
    "Antarctica/Mawson"
    ANTARCTICA_MAWSON
    "Antarctica/McMurdo"
    ANTARCTICA_MCMURDO
    "Antarctica/Palmer"
    ANTARCTICA_PALMER
    "Antarctica/Rothera"
    ANTARCTICA_ROTHERA
    "Antarctica/Syowa"
    ANTARCTICA_SYOWA
    "Antarctica/Troll"
    ANTARCTICA_TROLL
    "Antarctica/Vostok"
    ANTARCTICA_VOSTOK
    "Arctic/Longyearbyen"
    ARCTIC_LONGYEARBYEN
    "Asia/Aden"
    ASIA_ADEN
    "Asia/Almaty"
    ASIA_ALMATY
    "Asia/Amman"
    ASIA_AMMAN
    "Asia/Anadyr"
    ASIA_ANADYR
    "Asia/Aqtau"
    ASIA_AQTAU
    "Asia/Aqtobe"
    ASIA_AQTOBE
    "Asia/Ashgabat"
    ASIA_ASHGABAT
    "Asia/Atyrau"
    ASIA_ATYRAU
    "Asia/Baghdad"
    ASIA_BAGHDAD
    "Asia/Bahrain"
    ASIA_BAHRAIN
    "Asia/Baku"
    ASIA_BAKU
    "Asia/Bangkok"
    ASIA_BANGKOK
    "Asia/Barnaul"
    ASIA_BARNAUL
    "Asia/Beirut"
    ASIA_BEIRUT
    "Asia/Bishkek"
    ASIA_BISHKEK
    "Asia/Brunei"
    ASIA_BRUNEI
    "Asia/Chita"
    ASIA_CHITA
    "Asia/Choibalsan"
    ASIA_CHOIBALSAN
    "Asia/Colombo"
    ASIA_COLOMBO
    "Asia/Damascus"
    ASIA_DAMASCUS
    "Asia/Dhaka"
    ASIA_DHAKA
    "Asia/Dili"
    ASIA_DILI
    "Asia/Dubai"
    ASIA_DUBAI
    "Asia/Dushanbe"
    ASIA_DUSHANBE
    "Asia/Famagusta"
    ASIA_FAMAGUSTA
    "Asia/Gaza"
    ASIA_GAZA
    "Asia/Hebron"
    ASIA_HEBRON
    "Asia/Hong Kong"
    ASIA_HONG_KONG
    "Asia/Hovd"
    ASIA_HOVD
    "Asia/Ho Chi Minh"
    ASIA_HO_CHI_MINH
    "Asia/Irkutsk"
    ASIA_IRKUTSK
    "Asia/Jakarta"
    ASIA_JAKARTA
    "Asia/Jayapura"
    ASIA_JAYAPURA
    "Asia/Jerusalem"
    ASIA_JERUSALEM
    "Asia/Kabul"
    ASIA_KABUL
    "Asia/Kamchatka"
    ASIA_KAMCHATKA
    "Asia/Karachi"
    ASIA_KARACHI
    "Asia/Kathmandu"
    ASIA_KATHMANDU
    "Asia/Khandyga"
    ASIA_KHANDYGA
    "Asia/Kolkata"
    ASIA_KOLKATA
    "Asia/Krasnoyarsk"
    ASIA_KRASNOYARSK
    "Asia/Kuala Lumpur"
    ASIA_KUALA_LUMPUR
    "Asia/Kuching"
    ASIA_KUCHING
    "Asia/Kuwait"
    ASIA_KUWAIT
    "Asia/Macau"
    ASIA_MACAU
    "Asia/Magadan"
    ASIA_MAGADAN
    "Asia/Makassar"
    ASIA_MAKASSAR
    "Asia/Manila"
    ASIA_MANILA
    "Asia/Muscat"
    ASIA_MUSCAT
    "Asia/Nicosia"
    ASIA_NICOSIA
    "Asia/Novokuznetsk"
    ASIA_NOVOKUZNETSK
    "Asia/Novosibirsk"
    ASIA_NOVOSIBIRSK
    "Asia/Omsk"
    ASIA_OMSK
    "Asia/Oral"
    ASIA_ORAL
    "Asia/Phnom Penh"
    ASIA_PHNOM_PENH
    "Asia/Pontianak"
    ASIA_PONTIANAK
    "Asia/Pyongyang"
    ASIA_PYONGYANG
    "Asia/Qatar"
    ASIA_QATAR
    "Asia/Qostanay"
    ASIA_QOSTANAY
    "Asia/Qyzylorda"
    ASIA_QYZYLORDA
    "Asia/Riyadh"
    ASIA_RIYADH
    "Asia/Sakhalin"
    ASIA_SAKHALIN
    "Asia/Samarkand"
    ASIA_SAMARKAND
    "Asia/Seoul"
    ASIA_SEOUL
    "Asia/Shanghai"
    ASIA_SHANGHAI
    "Asia/Singapore"
    ASIA_SINGAPORE
    "Asia/Srednekolymsk"
    ASIA_SREDNEKOLYMSK
    "Asia/Taipei"
    ASIA_TAIPEI
    "Asia/Tashkent"
    ASIA_TASHKENT
    "Asia/Tbilisi"
    ASIA_TBILISI
    "Asia/Tehran"
    ASIA_TEHRAN
    "Asia/Thimphu"
    ASIA_THIMPHU
    "Asia/Tokyo"
    ASIA_TOKYO
    "Asia/Tomsk"
    ASIA_TOMSK
    "Asia/Ulaanbaatar"
    ASIA_ULAANBAATAR
    "Asia/Urumqi"
    ASIA_URUMQI
    "Asia/Ust-Nera"
    ASIA_UST_NERA
    "Asia/Vientiane"
    ASIA_VIENTIANE
    "Asia/Vladivostok"
    ASIA_VLADIVOSTOK
    "Asia/Yakutsk"
    ASIA_YAKUTSK
    "Asia/Yangon"
    ASIA_YANGON
    "Asia/Yekaterinburg"
    ASIA_YEKATERINBURG
    "Asia/Yerevan"
    ASIA_YEREVAN
    "Atlantic/Azores"
    ATLANTIC_AZORES
    "Atlantic/Bermuda"
    ATLANTIC_BERMUDA
    "Atlantic/Canary"
    ATLANTIC_CANARY
    "Atlantic/Cape Verde"
    ATLANTIC_CAPE_VERDE
    "Atlantic/Faroe"
    ATLANTIC_FAROE
    "Atlantic/Madeira"
    ATLANTIC_MADEIRA
    "Atlantic/Reykjavik"
    ATLANTIC_REYKJAVIK
    "Atlantic/South Georgia"
    ATLANTIC_SOUTH_GEORGIA
    "Atlantic/Stanley"
    ATLANTIC_STANLEY
    "Atlantic/St Helena"
    ATLANTIC_ST_HELENA
    "Australia/Adelaide"
    AUSTRALIA_ADELAIDE
    "Australia/Brisbane"
    AUSTRALIA_BRISBANE
    "Australia/Broken Hill"
    AUSTRALIA_BROKEN_HILL
    "Australia/Darwin"
    AUSTRALIA_DARWIN
    "Australia/Eucla"
    AUSTRALIA_EUCLA
    "Australia/Hobart"
    AUSTRALIA_HOBART
    "Australia/Lindeman"
    AUSTRALIA_LINDEMAN
    "Australia/Lord Howe"
    AUSTRALIA_LORD_HOWE
    "Australia/Melbourne"
    AUSTRALIA_MELBOURNE
    "Australia/Perth"
    AUSTRALIA_PERTH
    "Australia/Sydney"
    AUSTRALIA_SYDNEY
    "Canada/Atlantic"
    CANADA_ATLANTIC
    "Canada/Central"
    CANADA_CENTRAL
    "Canada/Eastern"
    CANADA_EASTERN
    "Canada/Mountain"
    CANADA_MOUNTAIN
    "Canada/Newfoundland"
    CANADA_NEWFOUNDLAND
    "Canada/Pacific"
    CANADA_PACIFIC
    "Europe/Amsterdam"
    EUROPE_AMSTERDAM
    "Europe/Andorra"
    EUROPE_ANDORRA
    "Europe/Astrakhan"
    EUROPE_ASTRAKHAN
    "Europe/Athens"
    EUROPE_ATHENS
    "Europe/Belgrade"
    EUROPE_BELGRADE
    "Europe/Berlin"
    EUROPE_BERLIN
    "Europe/Bratislava"
    EUROPE_BRATISLAVA
    "Europe/Brussels"
    EUROPE_BRUSSELS
    "Europe/Bucharest"
    EUROPE_BUCHAREST
    "Europe/Budapest"
    EUROPE_BUDAPEST
    "Europe/Busingen"
    EUROPE_BUSINGEN
    "Europe/Chisinau"
    EUROPE_CHISINAU
    "Europe/Copenhagen"
    EUROPE_COPENHAGEN
    "Europe/Dublin"
    EUROPE_DUBLIN
    "Europe/Gibraltar"
    EUROPE_GIBRALTAR
    "Europe/Guernsey"
    EUROPE_GUERNSEY
    "Europe/Helsinki"
    EUROPE_HELSINKI
    "Europe/Isle of Man"
    EUROPE_ISLE_OF_MAN
    "Europe/Istanbul"
    EUROPE_ISTANBUL
    "Europe/Jersey"
    EUROPE_JERSEY
    "Europe/Kaliningrad"
    EUROPE_KALININGRAD
    "Europe/Kirov"
    EUROPE_KIROV
    "Europe/Kyiv"
    EUROPE_KYIV
    "Europe/Lisbon"
    EUROPE_LISBON
    "Europe/Ljubljana"
    EUROPE_LJUBLJANA
    "Europe/London"
    EUROPE_LONDON
    "Europe/Luxembourg"
    EUROPE_LUXEMBOURG
    "Europe/Madrid"
    EUROPE_MADRID
    "Europe/Malta"
    EUROPE_MALTA
    "Europe/Mariehamn"
    EUROPE_MARIEHAMN
    "Europe/Minsk"
    EUROPE_MINSK
    "Europe/Monaco"
    EUROPE_MONACO
    "Europe/Moscow"
    EUROPE_MOSCOW
    "Europe/Oslo"
    EUROPE_OSLO
    "Europe/Paris"
    EUROPE_PARIS
    "Europe/Podgorica"
    EUROPE_PODGORICA
    "Europe/Prague"
    EUROPE_PRAGUE
    "Europe/Riga"
    EUROPE_RIGA
    "Europe/Rome"
    EUROPE_ROME
    "Europe/Samara"
    EUROPE_SAMARA
    "Europe/San Marino"
    EUROPE_SAN_MARINO
    "Europe/Sarajevo"
    EUROPE_SARAJEVO
    "Europe/Saratov"
    EUROPE_SARATOV
    "Europe/Simferopol"
    EUROPE_SIMFEROPOL
    "Europe/Skopje"
    EUROPE_SKOPJE
    "Europe/Sofia"
    EUROPE_SOFIA
    "Europe/Stockholm"
    EUROPE_STOCKHOLM
    "Europe/Tallinn"
    EUROPE_TALLINN
    "Europe/Tirane"
    EUROPE_TIRANE
    "Europe/Ulyanovsk"
    EUROPE_ULYANOVSK
    "Europe/Vaduz"
    EUROPE_VADUZ
    "Europe/Vatican"
    EUROPE_VATICAN
    "Europe/Vienna"
    EUROPE_VIENNA
    "Europe/Vilnius"
    EUROPE_VILNIUS
    "Europe/Volgograd"
    EUROPE_VOLGOGRAD
    "Europe/Warsaw"
    EUROPE_WARSAW
    "Europe/Zagreb"
    EUROPE_ZAGREB
    "Europe/Zurich"
    EUROPE_ZURICH
    "GMT"
    GMT
    "Indian/Antananarivo"
    INDIAN_ANTANANARIVO
    "Indian/Chagos"
    INDIAN_CHAGOS
    "Indian/Christmas"
    INDIAN_CHRISTMAS
    "Indian/Cocos"
    INDIAN_COCOS
    "Indian/Comoro"
    INDIAN_COMORO
    "Indian/Kerguelen"
    INDIAN_KERGUELEN
    "Indian/Mahe"
    INDIAN_MAHE
    "Indian/Maldives"
    INDIAN_MALDIVES
    "Indian/Mauritius"
    INDIAN_MAURITIUS
    "Indian/Mayotte"
    INDIAN_MAYOTTE
    "Indian/Reunion"
    INDIAN_REUNION
    "Pacific/Apia"
    PACIFIC_APIA
    "Pacific/Auckland"
    PACIFIC_AUCKLAND
    "Pacific/Bougainville"
    PACIFIC_BOUGAINVILLE
    "Pacific/Chatham"
    PACIFIC_CHATHAM
    "Pacific/Chuuk"
    PACIFIC_CHUUK
    "Pacific/Easter"
    PACIFIC_EASTER
    "Pacific/Efate"
    PACIFIC_EFATE
    "Pacific/Fakaofo"
    PACIFIC_FAKAOFO
    "Pacific/Fiji"
    PACIFIC_FIJI
    "Pacific/Funafuti"
    PACIFIC_FUNAFUTI
    "Pacific/Galapagos"
    PACIFIC_GALAPAGOS
    "Pacific/Gambier"
    PACIFIC_GAMBIER
    "Pacific/Guadalcanal"
    PACIFIC_GUADALCANAL
    "Pacific/Guam"
    PACIFIC_GUAM
    "Pacific/Honolulu"
    PACIFIC_HONOLULU
    "Pacific/Kanton"
    PACIFIC_KANTON
    "Pacific/Kiritimati"
    PACIFIC_KIRITIMATI
    "Pacific/Kosrae"
    PACIFIC_KOSRAE
    "Pacific/Kwajalein"
    PACIFIC_KWAJALEIN
    "Pacific/Majuro"
    PACIFIC_MAJURO
    "Pacific/Marquesas"
    PACIFIC_MARQUESAS
    "Pacific/Midway"
    PACIFIC_MIDWAY
    "Pacific/Nauru"
    PACIFIC_NAURU
    "Pacific/Niue"
    PACIFIC_NIUE
    "Pacific/Norfolk"
    PACIFIC_NORFOLK
    "Pacific/Noumea"
    PACIFIC_NOUMEA
    "Pacific/Pago Pago"
    PACIFIC_PAGO_PAGO
    "Pacific/Palau"
    PACIFIC_PALAU
    "Pacific/Pitcairn"
    PACIFIC_PITCAIRN
    "Pacific/Pohnpei"
    PACIFIC_POHNPEI
    "Pacific/Port Moresby"
    PACIFIC_PORT_MORESBY
    "Pacific/Rarotonga"
    PACIFIC_RAROTONGA
    "Pacific/Saipan"
    PACIFIC_SAIPAN
    "Pacific/Tahiti"
    PACIFIC_TAHITI
    "Pacific/Tarawa"
    PACIFIC_TARAWA
    "Pacific/Tongatapu"
    PACIFIC_TONGATAPU
    "Pacific/Wake"
    PACIFIC_WAKE
    "Pacific/Wallis"
    PACIFIC_WALLIS
    "US/Alaska"
    US_ALASKA
    "US/Arizona"
    US_ARIZONA
    "US/Central"
    US_CENTRAL
    "US/Eastern"
    US_EASTERN
    "US/Hawaii"
    US_HAWAII
    "US/Mountain"
    US_MOUNTAIN
    "US/Pacific"
    US_PACIFIC
    "UTC"
    UTC
}

"""

The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

"""

The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"The `Decimal` scalar type represents a python Decimal."
scalar Decimal

"""

Errors messages and codes mapped to
fields or non fields errors.
Example:
{
field_name: [
{
"message": "error message",
"code": "error_code"
}
],
other_field: [
{
"message": "error message",
"code": "error_code"
}
],
nonFieldErrors: [
{
"message": "error message",
"code": "error_code"
}
]
}
"""
scalar ExpectedErrorType

"""

The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

"""

Allows use of a JSON String for input / output from the GraphQL schema.

Use of this type is *not recommended* as you lose the benefits of having a defined, static
schema (one of the key benefits of GraphQL).
"""
scalar JSONString

scalar SocialCamelJSON

"""

Leverages the internal Python implmeentation of UUID (uuid.UUID) to provide native UUID objects
in fields, resolvers and input.
"""
scalar UUID

input CreateStackInput {
    email: CreateStackInputCreateEmail!
    siteTitle: String
}

input CreateStackInputCreateEmail {
    awsAccessKeyId: String
    awsSecretAccessKey: String
    awsSesAutoThrottle: Decimal
    awsSesConfig: String
    awsSesFromArn: String
    awsSesRegionEndpoint: String
    awsSesRegionName: String
    awsSesReturnPathArn: String
    awsSesSourceArn: String
    backend: EmailBackend
    created: DateTime
    dkimDomain: String
    dkimHeaders: String
    dkimKey: String
    dkimSelector: String
    failSilently: Boolean
    fromEmail: String
    host: String
    modified: DateTime
    password: String
    port: Int
    timeout: Int
    useSsl: Boolean
    useTls: Boolean
    username: String
}

input CreateUserInput {
    email: String!
    firstName: String!
    "Designates whether this user should be treated as active. Unselect this instead of deleting accounts."
    isActive: Boolean
    "Designates whether the user can log into this admin site."
    isStaff: Boolean
    "Designates that this user has all permissions without explicitly assigning them."
    isSuperuser: Boolean
    mobileNumber: String!
    password: String!
}

input PatchStackInput {
    email: PatchStackInputCreateEmail
    siteTitle: String
}

input PatchStackInputCreateEmail {
    awsAccessKeyId: String
    awsSecretAccessKey: String
    awsSesAutoThrottle: Decimal
    awsSesConfig: String
    awsSesFromArn: String
    awsSesRegionEndpoint: String
    awsSesRegionName: String
    awsSesReturnPathArn: String
    awsSesSourceArn: String
    backend: EmailBackend
    created: DateTime
    dkimDomain: String
    dkimHeaders: String
    dkimKey: String
    dkimSelector: String
    failSilently: Boolean
    fromEmail: String
    host: String
    modified: DateTime
    password: String
    port: Int
    timeout: Int
    useSsl: Boolean
    useTls: Boolean
    username: String
}

input PatchUserInput {
    email: String
    firstName: String
    lastName: String
    middleName: String
    mobileNumber: String
    profile: PatchUserInputCreateProfile
}

input PatchUserInputCreateProfile {
    address: String!
    company: String!
    created: DateTime
    dateOfBirth: Date
    extraInfo: JSONString
    gender: ProfileGender!
    inviteCode: String!
    legacyId: String!
    modified: DateTime
    nationality: String!
    picture: String!
    timezone: ProfileTimezone
}

input UpdateUserInputStaff {
    email: String
    firstName: String
    "Designates whether this user should be treated as active. Unselect this instead of deleting accounts."
    isActive: Boolean
    "Designates whether the user can log into this admin site."
    isStaff: Boolean
    "Designates that this user has all permissions without explicitly assigning them."
    isSuperuser: Boolean
    lastName: String
    middleName: String
    mobileNumber: String
    password: String
    profile: UpdateUserInputStaffCreateProfile
}

input UpdateUserInputStaffCreateProfile {
    address: String!
    company: String!
    created: DateTime
    dateOfBirth: Date
    extraInfo: JSONString
    gender: ProfileGender!
    inviteCode: String!
    legacyId: String!
    modified: DateTime
    nationality: String!
    picture: String!
    timezone: ProfileTimezone
}
